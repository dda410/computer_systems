DOCUMENTATION ASSIGNMENT 4 SYSTEM PROGRAMMING
=============================================
Dimitri Diomaiuta (2553339)


Introduction
~~~~~~~~~~~~

The assignment is about implementing a client/server pair that would
receive/send UDP data-grams containing music content. The client
requests to the server a .wav file that wants to play. The server
checks whether the file its present in its current directory, if this
is the case the file is sent to the client in chunks. The client
receives the chunk, sends an acknowledgment back and then plays
it. The connection between client and server closes when the
acknowledgment of the  last chunk is sent by the client and received
by the server. The uncompressed (LPCM) audio format .wav is used since
every byte is encoded singularly: giving to the client the possibility
to play the received stream.


Structure
~~~~~~~~~

audio.c:
	Contains the definitions of the function calls aud_readinit()
	and aud_writeinit(). They are used to open the .wav audio
	files (server) and open the output audio device to play the
	files (client).
	
audio.h:
	Contains the declarations of the aud_readinit() and
	aud_writeinit().
Changelog:
	Changelog from the previous years.
client.c:
	Contains the code of the client program.
libblank.c:
	Contains a sample library.
library.h:
	Contains the declarations of the functions needed for
	implementing a filter library (Assignment 5).
LICENSE:
	The BSD license used.
Makefile:
	The makefile of the program
msg.h:
	Header file that contains the defitions of three structs
	(Firstmsg, Audioconf and Datamsg) used by the client/server
	pair to communicate.
server.c:
	Contains the code of the server program.


Compilation
~~~~~~~~~~~

The invocation of the Makefile will compile each c file and then link
all the required binaries and libraries to client and server.


Execution
~~~~~~~~~

Once in the directory where the server and client BLOB are:
-----------------------------------------------------------
./server # with no arguments
./client <host name or address(ipv4)> <audio file> <library>
-----------------------------------------------------------
The last client argument is optional and will be implemented in the
next assignment.


Packet structures
~~~~~~~~~~~~~~~~~

The client and the server communicate using three different
structures (defined in msg.h header):


 struct Firstmsg
+--------------------------+
|                          |
| +----------+ +---------+ |
| |char      | |char     | |
| |filename[]| |libfile[]| |
| +----------+ +---------+ |
|                          |
+--------------------------+

This struct contains two array of characters. The first one holds the
name of the audio file to be played and the second one the name of the
filter library. The size of these two arrays is given by the NAME_MAX
macro (defined in the limits.h header) that gives the maximum possible
file name length under the current file system.
This struct is used by the client to send to the server the file audio
file to receive and optionally the filter library to apply.


 struct Audioconf
+---------------------------+
|                           |
| +----------+ +----------+ |
| |int       | |int       | |
| |audio_rate| |audio_size| |
| +----------+ +----------+ |
|                           |
| +----------+ +----------+ |
| |int       | |int       | |
| |channels  | |error     | |
| +----------+ +----------+ |
|                           |
+---------------------------+

This struct contains four integers. The first three (audio_rate,
audio_size and channels) are used to hold the configuration parameters
needed to play the file. Once the server opens the requested audio
file with the aud_readinit() function call then the relative values
will be set appropriately.
This struct is sent from the server to the client that will send this
parameters to the output audio device in order to play the file
accordingly. The last integer, error, is used in the case the file or
the library were not found by the server. In this case error will be
set by the server to be LIB_NOT_FOUND or AUDIO_FILE_NOT_FOUND, two
macros defined in the msg.h header file that are used as error
codes. Otherwise the error is set to SUCCESS macro. This is checked by
the client when the Audioconf struct is received. If there are no
errors (error == SUCCESS) then the execution is continued, otherwise
the relative error is printed and the client will halt its execution.


 struct Datamsg
+-------------------------------+
|                               |
| +---------------------------+ |
| |char[]                     | |
| |buffer                     | |
| +---------------------------+ |
|                               |
| +------------+ +------------+ |
| |int         | |unsigned int| |
| |length      | |msg_counter | |
| +------------+ +------------+ |
|                               |
+-------------------------------+

This struct contains the audio_chunk streamed from the server to the
client. Further more contains two integers, a signed and an unsigned
one, used for keeping track of the length of the chunk and the number
of the audio_chunk. The length of the chunk is used in order to know
when the last message is received (length < BUFSIZE). The counter is
used for checking of having received the right acknowledgment from the
client. Since the client will read the msg_counter and send the
acknowledgment accordingly.
The buffer array contains the audio chunks read from the server and
send over network to the client. It's size is defined by the macro
BUFSIZE (==1024 in this implementation).


Sequence diagram
~~~~~~~~~~~~~~~~

The following is a sequence diagram that explain how and in which
order the connections between client/server happen:

     SERVER                   CLIENT
     +---+                      |
     | | |                      |
     | | | send Firstmsg      +---+
     | | <--------------------+ | |
     | | |                    | | |
     | | | send Audioconf     | | |
     | | +--------------------> | |
     | | |                    | | |
+------------------------------------+
|Loop| | |                    | | |  |
+----+ | | send Datamsg       | | |  |
|    | | +--------------------> | |  |
|    | | |                    | | |  |
|    | | |send Acknowledgment | | |  |
|    | | <--------------------+ | |  |
+------------------------------------+
     | | |                    | | |
     | | | send last Datamsg  | | |
     | | +--------------------> | |
     | | |                    | | |
     | | | send last Ack...   | | |
     | | <--------------------+ X |
     | | |                    +---+
     +---+

We assume that the server is already up and running. We also assume
that no error occurs in this example (errors will be discussed in the
next section). When the client connects to the server send the
Firstmsg packet. The server opens the requested file and library (if
requested) and sends an Audioconf packet back to client. The client
gives the received configuration parameters to the output device. The
server meanwhile reads the first chunk of the audio file and sends the
Datamsg containing it to the client. The client receives the package,
sends back the acknowledgment accordingly to the msg_counter of the
Datamsg struct received and then sends the buffer containing the audio
to the output device in order to be played. This loop ends when the
file is read completely. When the client sends the last
acknowledgment it sends then the last chunk to the output device and
after it exits. The server after receiving the last acknowledgment
closes the connection with the client and waits for other clients to
connect.


Error conditions
~~~~~~~~~~~~~~~~

The client/server programs depends deeply on the sendto(), recvfrom()
and select() function calls. Whenever one of this functions returns a
value < 0 (an error code) the program prints to standard error an
error message plus the relative explanation of the error code. It then
exits with an exit(EXIT_FAILURE) call since it is an unrecoverable
error.
The server program never stops but continuously waits for a client to
connect. A connection with a client is closed when one of the
following errors occur:
	  1. The client requires a file or a library that does not
	  exist in the current directory.
	  2. The client stops responding.
	  3. The client stops sending the right acknowledgment back.

The client stops and exits when one of the following errors occur:
    	  1. The server stops responding.
	  2. The server stops sending the packages in sequence.
	  3. The server is already serving another client.

The client and server won't stop connection immediately but will retry
to send the right packet/acknowledgment a number of times. How many
times this will be retried is defined by individual macros both in
server and client.


Interrupt handling
~~~~~~~~~~~~~~~~~~

Both the server and the client support interrupt handling by ctrl-c in
every moment in order to close the program. When pressed ctrl-c a
first time the breakloop variable will change to 1. This value is
checked constantly by both program. In the case breakloop == 1 then
the programs will call a close_after_interrupt() function that will
close any open socket and file and then will exit the program.


Testing
~~~~~~~

In order to test the client/server programs on multiple files a bunch
of (LPCM).wav files were put in the same directory. After running the
server the client was executed by the following inline bash script:
----------------------------------------------------------------------------------
for file in *.wav; do padsp ./client localhost "$file" 1>/dev/null; sleep 1s; done
----------------------------------------------------------------------------------
It makes the client request for every .wav audio file in the
directory. The standard output is redirected to the null devices in
order to display messages just in case of errors.


|=[ EOF ]=---------------------------------------------------------------=|
